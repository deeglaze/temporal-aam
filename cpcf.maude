load full-maude26.maude . select FULL-MAUDE . loop init . load model-checker.maude .
load todefine.maude .
load ternary.maude .
load syntax.maude .

fmod AVal is pr SET{Value} * (sort Set{Value} to AVal) . endfm
fmod AKnt is pr SET{Kont} * (sort Set{Kont} to AKnt) . endfm
view AVal from TRIV to AVal is sort Elt to AVal . endv
view AKnt from TRIV to AKnt is sort Elt to AKnt . endv

load abstraction.maude .
load pmsm.maude .

***( This would be a functional module to parameterize over allocation 
     and addresses, but alas, we can't write rewrite rules
     in a functional module)***
mod CESK is
  pr Syntax .
  pr AVal . 
  pr AKnt .
  pr Abstraction .
  *** pr MAP{VAR, Addr} * (sort Map{VAR, Addr} to Env) .
  pr MAP{Addr, AVal} * (sort Map{Addr, AVal} to Heap ) .
  pr MAP{Addr, AKnt} * (sort Map{Addr, AKnt} to KHeap ) .
  ***pr LIST{Frame} * (sort List{Frame} to Kont) .
  pr LIST{Binding} * (sort List{Binding} to Bindings) .
  pr LIST{LCTerm} * (sort List{LCTerm} to LCTerms) .
  pr LIST{AVal} .
  pr LIST{AKnt} .
  pr BOOL-OPS .
  protecting META-LEVEL .

  op mtk : -> Kont [ctor] .
  op _k+_ : Frame Addr -> Kont [ctor] .

  *** Primitive functions ***
  op zero? : -> Prim [ctor] .
  op add1 : -> Prim [ctor] .
  op sub1 : -> Prim [ctor] .

  *** Non-term syntax ***
  op _gets_ : VAR LCTerm -> Binding [ctor] .

  *** Continuations ***
  op ifk : LCTerm LCTerm Env -> Frame [ctor] .
  op ev : Label LCTerms List{AVal} Env -> Frame [ctor] .
  op ltk : VAR Bindings ListVar List{AVal} LCTerm Env -> Frame [ctor] .
  op mnk : Label MLabel MLabel SContract Timeline Env -> Frame [ctor] .
  op chkA : MLabel MLabel Label SContract Timeline Addr Addr -> Frame [ctor] .
  op chkD : Addr Addr Timeline -> Frame [ctor] .
  op chkC : Label Value ΛMLabel ΛTimeline List{SContract} List{AVal} List{AVal}-> Frame [ctor] .
  op chk : MLabel Value -> Frame [ctor] .
  *** Expect a blclos (the called function), and name/timeline to return to.
  op postk : Label Value MLabel Timeline -> Frame [ctor] .
  op rtk : Value MLabel Timeline -> Frame [ctor] .
  op flatk : Label MLabel Value -> Frame [ctor] .
  op checkk : MLabel Value -> Frame [ctor] .

  op bind : ListAddr List{AVal} -> HeapDelta [ctor] .
  op same : -> HeapDelta [ctor] .

  op kbind : Addr AKnt -> KHeapDelta [ctor] .
  op ksame : -> KHeapDelta [ctor] .

  *** Machine states ***
  op wn : Point Heap KHeap -> State [ctor] .
    *** Only keep the heap so we can apply the delta as a standalone step.
  *** VAR is the inner-most named function we're in the context of.
  op wd : Point Heap KHeap HeapDelta KHeapDelta -> State [ctor] .
  op Eval : LCTerm Env Kont ΛMLabel ΛTimeline -> Point [ctor] .
  op Continue : Kont AVal ΛMLabel ΛTimeline -> Point [ctor] .
  op Check : SContract Env Value Bool Label MLabel MLabel Timeline Kont ΛMLabel ΛTimeline -> Point [ctor] .
***Check(R', ρ', v', v+, βu', βc', η', rtk(v, βΛ, ηΛ) k+ ak, βΛ, ηΛ)
  op Apply : Label Value List{AVal} Kont ΛMLabel ΛTimeline -> Point [ctor] .
  op Blame : ΛMLabel -> State [ctor] .
  op Fail : -> State [ctor] .

  *** Meta-functions ***
  op alloc : ListVar State -> ListVar .
  op allock : Label State -> Addr .
  op join : Heap Addr AVal -> Heap .
  op kjoin : KHeap Addr AKnt -> KHeap .
  op join-many : Heap ListAddr List{AVal} -> Heap .
  op bind-many : Env ListVar ListAddr -> Env .

  *** Metavariables for matching ***
  vars name x y : VAR .
  vars ℓ ℓ' : Label .
  vars ± : Bool .
  vars β β' βu βc βu' βc' : MLabel .
  vars e e0 e1 e2 : LCTerm .
  vars ς ς' : State .
  vars a a' pa pa' pd pd' ak : Addr .
  var i : Int .
  var b : Bool .
  vars v v' va vd vf : Value .
  vars ρ ρ0 ρ1 ρ' : Env .
  vars σ σ0 σ1 σ' : Heap .
  vars kσ kσ0 kσ1 kσ' : KHeap .
  vars κ κ0 κ1 : Kont .
  vars es es0 es1 : LCTerms .
  vars as as' : ListVar . *** Addr
  vars vss vss' : List{AVal} .
  vars xs xs' : ListVar .
  var bs : Bindings .
  vars vs vs' : AVal .
  vars κs κs' : AKnt .
  var str : String .
  var δ : HeapDelta .
  var kδ : KHeapDelta .
  var ςh : Point .
  vars n n' : MLabel .
  vars βΛ βΛ' : ΛMLabel .
  var η η' : Timeline .
  vars ηΛ ηΛ' pηΛ : ΛTimeline .
  vars S A D R R' : SContract .
  vars Ds Ds' : List{SContract} .
  vars T : TContract .
  vars C : Contract .

  sort AddrPair .
  op addrpair : Addr Addr -> AddrPair [ctor] .

  op allocpair : Label State -> AddrPair .
  op allocmon : MLabel Label State -> Addr .

  *** DEFINITIONS OF META-FUNCTIONS ***
  eq allock(ℓ, ς) = (ℓ→a ℓ) .
  eq alloc(nil, ς) = nil .
  eq alloc((vv str) xs, ς) = (aa str) alloc(xs, ς) .
  eq allocmon(n, ℓ, ς) = (ℓ→a ℓ) .
  eq allocpair(ℓ, ς) = addrpair(ConsA (ℓ→a ℓ), ConsD (ℓ→a ℓ)) .
  *** We can't overwrite bindings. Instead, we have to match to get the rest without the binding .
  eq join((σ, a |-> vs'), a, vs) = (σ,a |-> (vs' , vs)) .
  eq join(σ, a, vs) = (σ,a |-> vs) [owise] .

  eq kjoin((kσ, a |-> κs'), a, κs) = (kσ,a |-> (κs' , κs)) .
  eq kjoin(kσ, a, κs) = (kσ,a |-> κs) [owise] .

  op applyΔ : HeapDelta Heap -> Heap .
  eq applyΔ(same, σ) = σ .
  eq applyΔ(bind(as, vss), σ) = join-many(σ, as, vss) .

  op applykΔ : KHeapDelta KHeap -> KHeap .
  eq applykΔ(ksame, kσ) = kσ .
  eq applykΔ(kbind(a, κs), kσ) = kjoin(kσ, a, κs) .

  op bind-overwrite : Env VAR Addr -> Env .
  eq bind-overwrite((ρ, x |-> a), x, a') = ρ, x |-> a' .
  eq bind-overwrite(ρ, x, a) = ρ, x |-> a [owise] .

  *** abstractions ***
  op do-add1 : AVal -> AVal .
  op do-sub1 : AVal -> AVal .
  op do-zero? : AVal -> AVal .

  ceq do-add1(vs) = IntTop if vs abs-has IntTop .
  eq do-add1(vs) = empty [owise] .

  ceq do-sub1(vs) = IntTop if vs abs-has IntTop .
  eq do-sub1(vs) = empty [owise] .
***(
  eq do-zero?(empty) = empty .
  ceq do-zero?(v, vs) = (if (v == LitV 0) then
                            (LitV true)
                         else
                          if ((LitV 0) vin v) then
                             ((LitV true), (LitV false))
                          else
                             (LitV false)
                          fi
                        fi), do-zero?(vs) .
)
  *** Derived meta-functions ***
  eq bind-many(ρ, nil, nil) = ρ .
  eq bind-many(ρ, x xs, a as) = bind-many(bind-overwrite(ρ, x, a), xs, as) .

  eq join-many(σ, nil, nil) = σ .
  eq join-many(σ, a as, vs vss) = join-many(join(σ,a,vs), as, vss) .

  **********************************************************************
  ************************* The core semantics *************************
  **********************************************************************
  *** Eval rules ***
  crl [var-eval] : wn(Eval(Var(ℓ, x), ρ, κ, βΛ, ηΛ), σ, kσ) => wd(Continue(κ, σ[ρ[x]], βΛ, ηΛ), σ, kσ, same, ksame)
                   if $hasMapping(ρ,x) .
  rl [litI-eval] : wn(Eval(Lit(ℓ, i), ρ, κ, βΛ, ηΛ), σ, kσ) => wd(Continue(κ, LitV i, βΛ, ηΛ), σ, kσ, same, ksame) .
  rl [litB-eval] : wn(Eval(Lit(ℓ, b), ρ, κ, βΛ, ηΛ), σ, kσ) => wd(Continue(κ, LitV b, βΛ, ηΛ), σ, kσ, same, ksame) .
  rl [Lam-eval] : wn(Eval(Lam(ℓ, name, xs, e), ρ, κ, βΛ, ηΛ), σ, kσ) => wd(Continue(κ, CloV(xs, e, ρ), βΛ, ηΛ), σ, kσ, same, ksame) .
  crl [app-eval] : ς => wd(Eval(e0, ρ, ev(ℓ, es, nil, ρ) k+ ak, βΛ, ηΛ), σ, kσ, same, kbind(ak, κ))
                   if wn(Eval(App(ℓ, e0, es), ρ, κ, βΛ, ηΛ), σ, kσ) := ς
                   /\ ak := allock(ℓ, ς) .
  crl [if-eval] : ς => wd(Eval(e0, ρ, ifk(e1,e2,ρ) k+ ak, βΛ, ηΛ), σ, kσ, same, kbind(ak, κ))
                  if wn(Eval(If(ℓ, e0,e1,e2), ρ, κ, βΛ, ηΛ), σ, kσ) := ς
                  /\ ak := allock(ℓ, ς) .
  rl [let0-eval] : wn(Eval(Let(ℓ, nil, e), ρ, κ, βΛ, ηΛ), σ, kσ) => wd(Eval(e, ρ, κ, βΛ, ηΛ), σ, kσ, same, ksame) .
  crl [let-eval] : ς => wd(Eval(e0, ρ, ltk(x, bs, nil, nil, e1, ρ) k+ ak, βΛ, ηΛ), σ, kσ, same, kbind(ak, κ))
                   if wn(Eval(Let(ℓ, (x gets e0) bs, e1), ρ, κ, βΛ, ηΛ), σ, kσ) := ς
                   /\ ak := allock(ℓ, ς) .

  *** Continue rules ***
  crl [let-bind] : ς => wd(Eval(e, ρ1, κ, βΛ, ηΛ), σ, kσ, bind(as, vs vss), ksame)
                   if wn(Continue(ltk(x, nil, xs, vss, e, ρ0) k+ ak, vs, βΛ, ηΛ), σ, kσ) := ς
                    /\ κ, κs := kσ[ak]
                    /\ xs' := (x xs)
                    /\ as := alloc(xs', ς)
                    /\ ρ1 := bind-many(ρ0, xs', as) .
  rl [let-continue] : wn(Continue(ltk(x, (y gets e0) bs, xs, vss, e1, ρ) k+ ak, vs, βΛ, ηΛ), σ, kσ) =>
                      wd(Eval(e0, ρ, ltk(y, bs, x xs, vs vss, e1, ρ) k+ ak, βΛ, ηΛ), σ, kσ, same, ksame) .
  crl [ev0-continue] : wn(Continue(ev(ℓ, nil, nil, ρ) k+ ak, vs, βΛ, ηΛ), σ, kσ) =>
                       wd(Apply(ℓ, v, nil, κ, βΛ, ηΛ), σ, kσ, same, ksame)
                       if v:Value , vs' := vs 
                       /\ κ, κs := kσ[ak] .
  rl [ev-continue] : wn(Continue(ev(ℓ, e es, vss, ρ) k+ ak, vs, βΛ, ηΛ), σ, kσ) =>
                     wd(Eval(e, ρ, ev(ℓ, es, vs vss, ρ) k+ ak, βΛ, ηΛ), σ, kσ, same, ksame) .
  crl [ev-done] : wn(Continue(ev(ℓ, nil, vss, ρ) k+ ak, vs, βΛ, ηΛ), σ, kσ) =>
                  wd(Apply(ℓ, v, vss', κ, βΛ, ηΛ), σ, kσ, same, ksame)
                  if ((v, vs') vss') := reverse(vs vss)
                  /\ κ, κs := kσ[ak] .
  crl [if-then] : wn(Continue(ifk(e0, e1, ρ) k+ ak, vs, βΛ, ηΛ), σ, kσ) =>
                  wd(Eval(e0, ρ, κ, βΛ, ηΛ), σ, kσ, same, ksame)
                  if LitV true in vs
                  /\ κ, κs := kσ[ak] .
  crl [if-else] : wn(Continue(ifk(e0, e1, ρ) k+ ak, vs, βΛ, ηΛ), σ, kσ) =>
                  wd(Eval(e1, ρ, κ, βΛ, ηΛ), σ, kσ, same, ksame)
                  if LitV false in vs
                  /\ κ, κs := kσ[ak] .

  *** Apply rules ***
  crl [Call] : ς => wd(Eval(e, ρ1, κ, βΛ, ηΛ), σ, kσ, bind(as, vss), ksame)
      if wn(Apply(ℓ, CloV(xs, e, ρ0), vss, κ, βΛ, ηΛ), σ, kσ) := ς
      /\ as := alloc(xs, ς)
      /\ ρ1 := bind-many(ρ0, xs, as) .
  crl [Add1] : wn(Apply(ℓ, LitV add1, vs, κ, βΛ, ηΛ), σ, kσ) => wd(Continue(κ, vs', βΛ, ηΛ), σ, kσ, same, ksame)
               if vs' := do-add1(vs)
               /\ vs' =/= empty .
  crl [Sub1] : wn(Apply(ℓ, LitV sub1, vs, κ, βΛ, ηΛ), σ, kσ) => wd(Continue(κ, do-sub1(vs), βΛ, ηΛ), σ, kσ, same, ksame)
               if vs' := do-add1(vs)
               /\ vs' =/= empty .

*** INVARIANT: do-zero? can never introduce empty.
***  rl [Zero?] : wn(Apply(ℓ, LitV zero?, vs, κ), σ, kσ) => wd(Continue(κ, do-zero?(vs)), σ, kσ, same, ksame) .

  *** Heap delta application (only for narrow evaluation) ***
  rl [Heap-change] : wd(ςh, σ, kσ, δ, kδ) => wn(ςh, applyΔ(δ, σ), applykΔ(kδ, kσ)) .

  *** Answers self-reduce in order to keep the Kripke structure infinite .
  rl [Answer] : wn(Continue(nil, vs, βΛ, ηΛ), σ, kσ) => wn(Continue(nil, vs, βΛ, ηΛ), σ, kσ) .

  **********************************************************************
  ******************* The monitor-specific semantics *******************
  **********************************************************************
  crl [Monitor-eval] : ς => wd(Eval(e, ρ, φ k+ ak, βΛ, ηΛ), σ, kσ, same, kbind(ak, κ))
                       if wn(Eval(Mon(ℓ, βu, βc, mkcon(S, T), e), ρ, κ, βΛ, ηΛ), σ, kσ) := ς
                       /\ ak := allock(ℓ, ς)
                       /\ η := allocη(ℓ, ς)
                       /\ φ := mnk(ℓ, βu, βc, S, η, ρ) .
  crl [Module-ret] : ς => wd(Continue(κ, vs, βΛ', ηΛ'), σ, kσ, same, ksame)
                     if wn(Continue(krt(v, βΛ', ηΛ') k+ ak, vs, βΛ, ηΛ), σ, kσ) := ς
                     /\ κ, κs := kσ[ak] .
  crl [Check-wrap] : wn(Continue(mnk(ℓ, βu, βc, S, η, ρ) k+ ak, (v, vs), βΛ, ηΛ), σ, kσ) =>
                     wd(Check(S, ρ, v, v+, ℓ, βu, βc, η, κ), σ, kσ, same, ksame) .
  crl [Eval-flat] : ς => wd(Eval(e, ρ, flatk(ℓ, β, v) k+ ak, βΛ, ηΛ), σ, kσ, same, kbind(ak, κ))
                    if wn(Check(FlatCon(e), ρ, v, ±, ℓ, βu, βc, η, κ, βΛ, ηΛ), σ, kσ) := ς
                    /\ ak := allock(ℓ, ς)
                    /\ β := if ± then βu else βc fi .
  crl [HO-check-Clo] : ς => wd(Continue(κ, blCloV(n, ℓ, βu, βc, Ds, R, ρ, η, a), βΛ, ηΛ), σ, kσ, bind(a, v), ksame)
                      if wn(Check(ArrCon(n, Ds, R), ρ, v, ±, ℓ, βu, βc, η, κ, βΛ, ηΛ), σ, kσ) := ς
                      /\ a := allocmon(n, ℓ, ς)
                      /\ CloV(xs, e, ρ') := v .
  *** Have to duplicate because Maude doesn't have OR. Seriously craptastic.
  crl [HO-check-blClo] : ς => wd(Continue(κ, blCloV(n, ℓ, βu, βc, Ds, R, ρ, η, a), βΛ, ηΛ), σ, kσ, bind(a, v), ksame)
                        if wn(Check(ArrCon(n, Ds, R), ρ, v, ±, ℓ, βu, βc, η, κ, βΛ, ηΛ), σ, kσ) := ς
                        /\ a := allocmon(n, ℓ, ς)
                        /\ blCloV(n', ℓ', βu', βc', Ds', R', ρ', η', a') := v .

   crl [Check-car] : ς => wd(Check(A, ρ, va, v+, ℓ, βu, βc, η, chkA(ℓ, βu, βc, D, η, ρ, pa', pd', pd) k+ ak, βΛ, ηΛ), σ, kσ, same, ksame)
                     if wn(Continue(mnk(ℓ, βu, βc, PairCon(A, D), η, ρ) k+ ak, (vcons(pa, pd, pηΛ), vs), βΛ, ηΛ), σ, kσ) := ς
                     /\ va, vs := σ[pa]
                     /\ addrpair(pa', pd') := allocpair(ℓ, ς) .

   crl [Check-cdr] : wn(Continue(chkA(ℓ, βu, βc, D, η, ρ, pa', pd', pd) k+ ak, v, βΛ, ηΛ), σ, kσ) =>
                     wd(Check(D, ρ, vd, v+, ℓ, βu, βc, η, chkD(pa', pd', η) k+ ak, βΛ, ηΛ), σ, kσ, bind(pa', v), ksame)
                     if vd, vs := σ[pd] .

   crl [Bless-cons] : wn(Continue(chkD(pa, pd, η) k+ ak, v, βΛ, ηΛ), σ, kσ) =>
                      wd(Continue(κ, vcons(pa, pd, η), βΛ, ηΛ), σ, kσ, bind(pd, v), ksame)
                      if κ, κs := kσ[ak] .

   crl [Run-flat] : wn(Continue(flatk(ℓ, βu, v') k+ ak, v, βΛ, ηΛ), σ, kσ) =>
                    wd(Apply(ℓ, v, v', checkk(βu, v') k+ ak, βΛ, ηΛ), σ, kσ, same, ksame) .
   crl [Flat-pass] : wn(Continue(checkk(βu, v') k+ ak, ((LitV true), vs), βΛ, ηΛ), σ, kσ) =>
                     wd(Continue(κ, v', βΛ, ηΛ), σ, kσ, same, ksame)
                     if κ, κs := kσ[ak] .
   crl [Flat-fail] : wn(Continue(checkk(βu, v') k+ ak, ((LitV false), vs), βΛ, ηΛ), σ, kσ) =>
                     Blame(βu)
                     if κ, κs := kσ[ak] .

   crl [Post-check] : wn(Continue(postk(ℓ, v, βΛ, ηΛ) k+ ak, (v', vs), βΛ, ηΛ), σ, kσ) =>
                      wd(Check(R', ρ', v', v+, ℓ, βu', βc', η', rtk(v, βΛ, ηΛ) k+ ak, βΛ, ηΛ), σ, kσ, same, ksame)
                      if blCloV(n', ℓ', βu', βc', Ds', R', ρ', η', a') := v .

   crl [Check-Dom0] : ς => wd(Apply(ℓ, vf, nil, postk(ℓ, v, βΛ, ηΛ) k+ ak, βΛ, ηΛ),  σ, kσ, same, kbind(ak, κ))
                      if wn(Apply(ℓ, v, nil, rtk(v, βΛ, ηΛ) k+ ak, σ, kσ) := ς
                      /\ blCloV(n', ℓ', βu', βc', nil, R', ρ', η', a') := v
                      /\ vf, vs := σ[a'] .

   crl [Check-Domn] : ς => wd(Check(D, ρ', v', v-, ℓ, βu', βc', η', chkC(ℓ, v, βΛ, ηΛ, Ds, vss, nil) k+ ak, βΛ, ηΛ), σ, kσ, same, kbind(ak, κ))
                      if wn(Apply(ℓ, v, ((v', vs) vss), κ, βΛ, ηΛ), σ, kσ) := ς
                      /\ blCloV(n', ℓ', βu', βc', (D Ds), R', ρ', η', a') := v
                      /\ ak := allock(ℓ, ς) .

   crl [Check-Dom-more] : wn(Continue(chkC(ℓ, v, βΛ', ηΛ', D Ds, (v', vs') vss, vss') k+ ak, vs, βΛ, ηΛ), σ, kσ) =>
                          wd(Check(D, ρ', v', v-, ℓ, βu', βc', η', chkC(ℓ, v, βΛ', ηΛ', Ds, vss, (vs vss')) k+ ak, βΛ, ηΛ), σ, kσ, same, ksame)
                          if blCloV(n', ℓ', βu', βc', Ds', R', ρ', η', a') := v .

   crl [Check-Dom-done] : wn(Continue(chkC(ℓ, v, βΛ', ηΛ', nil, nil, vss) k+ ak, vs, βΛ, ηΛ), σ, kσ) =>
                          wd(Apply(ℓ, vf, reverse(vs vss), postk(ℓ, v, βΛ, ηΛ) k+ ak, n', η'), σ, kσ, same, ksame)
                          if blCloV(n', ℓ', βu', βc', Ds', R', ρ', η', a') := v
                          /\ vf, vs' := σ[a'] .

endm
