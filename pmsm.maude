
fmod WEAK-OPTION{X :: TRIV} is
 sort Weak-Option{X} .
 pr SET{X} .
 op Never : -> Weak-Option{X} [ctor] .
 op May_ : Set{X} -> Weak-Option{X} [ctor] .
 op Must_ : X$Elt -> Weak-Option{X} [ctor] .
endfm

mod BindEnv is
 pr ToDefine .
 pr Syntax .
 pr AVal .
 pr MAP{VAR, AVal} * (sort Map{VAR, AVal} to BindEnv) .
endm
view BindEnv from TRIV to BindEnv is sort Elt to BindEnv . endv

mod PMSM is
  pr Syntax .
  pr BindEnv .
  pr INT .
  pr TRIT .
  pr WEAK-OPTION{BindEnv} .
  pr LIST{AllPat} .
  pr LIST{SContract} .
  pr Abstraction .

  op r$_ : VAR -> NamePat [ctor] .
  op rΛ_ : MLabel -> NamePat [ctor] .
  op cnst_ : Value -> ConstPat [ctor] .

  op b?_ : VAR -> BindPat [ctor] .
  op wc : -> RefPat [ctor] .

  vars x y : VAR .
  var v v' : Value .
  var a : Addr .
  var η : Timeline .
  vars δ δ' : BindEnv .
  var ρ : Env .
  vars n n' : NamePat .
  vars p p' : AllPat .
  vars vs vs' : AVal .
  vars ps ps' : List{AllPat} .
  vars pat pat' : Pattern .
  vars β β' βu βc : MLabel .
  vars ℓ : Label .
  vars S D R R' : SContract .
  vars Ds Ds' : List{SContract} .
  vars A A' : Event .
  var wδ : Weak-Option{BindEnv} .

  op matchpat : Pattern Pattern BindEnv -> Weak-Option{BindEnv} .
  op nonmatchpat : Pattern Pattern BindEnv -> Weak-Option{BindEnv} .
  op matchname : NamePat AllPat BindEnv -> Trit .
  op match : AllPat AllPat Weak-Option{BindEnv} -> Weak-Option{BindEnv} .
  op matches : List{AllPat} List{AllPat} Weak-Option{BindEnv} -> Weak-Option{BindEnv} .

  op weak-if : Trit Weak-Option{BindEnv} -> Weak-Option{BindEnv} [strat (1 0)] .
  eq weak-if(true, wδ) = wδ .
  eq weak-if(U, Must δ) = May δ .
  eq weak-if(U, May δ) = May δ .
  eq weak-if(U, Never) = Never .
  eq weak-if(false, wδ) = Never .

  eq matchpat(callev(n, ps), callev(n', ps'), δ) = weak-if(matchname(n,n',δ), matches(ps, ps', Must δ)) .
  eq matchpat(retev(n, p), retev(n', p'), δ) = weak-if(matchname(n, n', δ), match(p, p', Must δ)) .

  ceq nonmatchpat(pat, pat', δ) = May δ' if May δ' := matchpat(pat, pat', δ) .
  ceq nonmatchpat(pat, pat', δ) = Never if Must δ' := matchpat(pat, pat', δ) .
  ceq nonmatchpat(pat, pat', δ) = Must δ if Never := matchpat(pat, pat', δ) .

  eq matchname(r$ x, cnst v, (δ, x |-> vs)) = v vcouldeq vs .
  eq matchname(rΛ β, cnst blCloV(β, ℓ, βu, βc, Ds, R, ρ, η, a), δ) = true . *** Same β
  eq matchname(cnst v, cnst v', δ) = v veq v' .
  eq matchname(n, p, δ) = false [owise] .

  eq matches(nil, nil, wδ) = wδ .
  ceq matches(p ps, p' ps', wδ) = matches(ps, ps', Must δ') if Must δ' := match(p, p', wδ) .
  ceq matches(p ps, p' ps', wδ) = matches(ps, ps', May δ') if May δ' := match(p, p', wδ) .
  eq matches(ps, ps', wδ) = Never [owise] .

  eq match(b? x, cnst v, Must (δ, x |-> vs)) = Must (δ, x |-> v) .
  eq match(b? x, cnst v, May (δ, x |-> vs)) = May (δ, x |-> v) .
  eq match(b? x, cnst v, Must δ) = Must (δ, x |-> v) .
  eq match(b? x, cnst v, May δ) = Must (δ, x |-> v) .
  eq match(wc, cnst v, wδ) = wδ .
  eq match(r$ x, cnst v, Must (δ, x |-> vs)) = weak-if(v vcouldeq vs, Must (δ, x |-> vs)) .
  eq match(r$ x, cnst v, May (δ, x |-> vs)) = weak-if(v vcouldeq vs, May (δ, x |-> vs)) .
  eq match(cnst v, cnst v', wδ) = weak-if(v veq v', wδ) .
  eq match(p, p', wδ) = Never [owise] .
endm

mod TConPMSM is
  pr PMSM .
  pr INT .
  inc PMSM-Data .
  pr LIST{WCNamePat} .
  pr SET{Machine} .
  pr SET{MachineTop} .

  sorts MachineDo MakeMachine .
  vars m0 m1 m m' : Machine .
  var n : NamePat .
  vars pat pat' : Pattern .
  var E : Event .
  var mt mt0 mt1 : MachineTop .
  var mts : Set{MachineTop} .
  var ms : Set{Machine} .
  vars d d' d0 d1 : MachineDo .
  vars mkm1 mkm : MakeMachine .
  vars δ δ' δ0 δ1 : BindEnv .
  vars t t' : Trit .
  vars T T' : TContract .
  var wcns : List{WCNamePat} .

  op mtop : Machine Trit -> MachineTop [ctor] .
  op bmachine : MachineDo BindEnv -> Machine [ctor] .
  op machine : MachineDo -> Machine [ctor] .

  *** Canonical machines
  op null-machine : -> MachineTop .
  op epsilon-machine : -> MachineTop .
  op Upsilon-machine : -> MachineTop .
  op sigma-star-machine : -> MachineTop .

  op machine-null : -> MachineDo [ctor] .
  op machine-sigma-star : -> MachineDo [ctor] .
  op machine-union : Set{Machine} -> MachineDo [ctor] .
  op machine-and : Set{Machine} -> MachineDo [ctor] .
  op machine-seq : Machine MakeMachine -> MachineDo [ctor] .
  op machine-dseq : Pattern TContract -> MachineDo [ctor] .
  op machine-complement : Machine -> MachineDo [ctor] .
  op machine-match : Pattern -> MachineDo [ctor] .
  op machine-nonmatch : Pattern -> MachineDo [ctor] .

  op step : MachineTop Pattern -> MachineTop .

  op star-machine : MachineTop -> MachineTop .
  op seq-machine : MachineTop MakeMachine -> MachineTop .
  op complement-machine : MachineTop -> MachineTop .
  op union-machine : Set{MachineTop} -> MachineTop .

  op mk-star : MachineTop -> MakeMachine [ctor] .
  op thunk : MachineTop -> MakeMachine [ctor] .

  op event->pattern : Event -> Pattern .
  eq event->pattern(callact(n, wcns)) = callev(n, wcns) .
  eq event->pattern(retact(n, wcns)) = retev(n, wcns) .

  op TCon->Machine : TContract BindEnv Trit -> MachineTop .
  eq TCon->Machine(tev(E), δ, t) = mtop(bmachine(machine-match(event->pattern(E)), δ), t) .
  eq TCon->Machine(!ev(E), δ, t) = mtop(bmachine(machine-nonmatch(event->pattern(E)), δ), t) .
  eq TCon->Machine(ddd, δ, t) = mtop(machine(machine-sigma-star), t) .
  eq TCon->Machine(T ∪ T', δ, t) = union-machine((TCon->Machine(T, δ, t), TCon->Machine(T', δ, t))) .
  eq TCon->Machine(T · T', δ, t) = seq-machine(TCon->Machine(T, δ), thunk(TCon->Machine(T', δ, t))) .
  eq TCon->Machine(¬ T, δ, t) = complement-machine(TCon->Machine(T, δ, t)) .
  eq TCon->Machine(kl T, δ, t) = star-machine(TCon->Machine(T, δ, t)) .
  eq TCon->Machine(dseq(pat, T), δ, t) = mtop(bmachine(machine-dseq(pat, T), δ), t) .

  op machine->valuation : MachineTop Trit -> MachineTop .
  eq machine->valuation(mtop(m, t), t') = mtop(m, t') .

  eq sigma-star-machine = mtop(machine(machine-sigma-star), true) .
  eq null-machine = mtop(machine(machine-null), false) .
  eq epsilon-machine = mtop(machine(machine-null), true) .
  eq Upsilon-machine = mtop(machine(machine-null), U) .

  op machine-do : Machine -> MachineDo .
  eq machine-do(bmachine(d, δ)) = d .
  eq machine-do(machine(d)) = d .

  op top->machine : MachineTop -> Machine .
  eq top->machine(mtop(m, t)) = m .

  op topset->set : Set{MachineTop} -> Set{Machine} .
  eq topset->set(empty) = empty .
  eq topset->set((mt, mts)) = top->machine(mt), topset->set(mts) .

  eq union-machine(empty) = null-machine .
  eq union-machine(mt) = mt .
  eq union-machine((mtop(machine(machine-null), false), mts)) = union-machine(mts) . *** m0 is null machine
  eq union-machine((mtop(machine(machine-null), U), mts)) = machine->valuation(union-machine(mts), U) .
  eq union-machine((mtop(machine(machine-null), true), mts)) = machine->valuation(union-machine(mts), true) .
  eq union-machine((mtop(m, t), mts)) = mtop(machine(machine-union((m, topset->set(union-machine(mts))))), t) [owise] .

  eq complement-machine(mtop(m, t)) = mtop(machine(machine-complement(m)), not t) .

  op make-machine : MakeMachine -> MachineTop .
  eq make-machine(mk-star(mt)) = star-machine(mt) .
  eq make-machine(thunk(mt)) = mt .

  eq seq-machine(mtop(machine(machine-null), true), mkm1) = make-machine(mkm1) .
  eq seq-machine(mtop(machine(machine-null), U), mkm1) = make-machine(mkm1) .
  eq seq-machine(mtop(machine(machine-null), false), mkm1) = null-machine .
  eq seq-machine(mtop(m, false), mkm1) = mtop(machine(machine-seq(m, mkm1)), false) .
  eq seq-machine(mtop(m, t), mkm1) =
     union-machine((mtop(machine(machine-seq(m, mkm1)), false), make-machine(mkm1))) [owise] .

  eq star-machine(mtop(machine(machine-null), false)) = null-machine .
  eq star-machine(mt) = machine->valuatiuon(seq-machine(machine->valuation(mt, false), mk-star(mt)), true) .

  op do-machine : Machine Pattern -> MachineTop .
  eq step(mtop(m, t), pat) = do-machine(m, pat) .

  op do-machines : Set{Machine} Pattern -> Set{MachineTop} .
  eq do-machines(empty, pat) = empty .
  eq do-machines((m, ms), pat) = do-machine(m, pat), do-machines(ms, pat) .

  eq do-machine(machine(machine-null), pat) = null-machine .
  eq do-machine(machine(machine-union(ms)), pat) = union-machine(do-machines(ms, pat)) .
  eq do-machine(machine(machine-seq(m, mkm)), pat) = seq-machine(do-machine(m, pat), mkm) .
  eq do-machine(machine(machine-complement(m)), pat) = complement-machine(do-machine(m, pat)) .
  eq do-machine(machine(machine-sigma-star), pat) = sigma-star-machine . *** Consume and continue

  *** A
  ceq do-machine(bmachine(machine-match(pat), δ), pat') = epsilon-machine
      if Must δ' := matchpat(pat, pat', δ) .
  ceq do-machine(bmachine(machine-match(pat), δ), pat') = null-machine
      if Never := matchpat(pat, pat', δ) .
  ceq do-machine(bmachine(machine-match(pat), δ), pat') = Upsilon-machine
      if May δ' := matchpat(pat, pat', δ) .

  *** ! A
  ceq do-machine(bmachine(machine-nonmatch(pat), δ), pat') = epsilon-machine
      if Must δ' := nonmatchpat(pat, pat', δ) .
  ceq do-machine(bmachine(machine-nonmatch(pat), δ), pat') = null-machine
      if Never := nonmatchpat(pat, pat', δ) .
  ceq do-machine(bmachine(machine-nonmatch(pat), δ), pat') = Upsilon-machine
      if May δ' := nonmatchpat(pat, pat', δ) .

  *** Dependent sequencing
  ceq do-machine(bmachine(machine-dseq(pat, T), δ), pat') = null-machine
      if Never := matchpat(pat, pat', δ) .
  ceq do-machine(bmachine(machine-dseq(pat, T), δ), pat') = TCon->Machine(T, δ', true)
      if Must δ' := matchpat(pat, pat', δ) .
  ceq do-machine(bmachine(machine-dseq(pat, T), δ), pat') = TCon->Machine(T, δ', U)
      if May δ' := matchpat(pat, pat', δ) .
endm
